<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd   
           http://www.springframework.org/schema/context    
           http://www.springframework.org/schema/context/spring-context-4.3.xsd
           http://www.springframework.org/schema/tx   
      	   http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       	   http://www.springframework.org/schema/aop   
      	   http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      	   http://www.springframework.org/schema/task 
      	   http://www.springframework.org/schema/task/spring-task-4.3.xsd
      	   http://www.springframework.org/schema/mvc
      	   http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">


<!-- 	<context:annotation-config />  -->
	<!-- 扫描指定package下所有带有如@controller,@services,@resource,并把所注释的注册为Spring Beans -->
	<context:component-scan base-package="com.qding.bigdata.ds">
	 <context:exclude-filter type="annotation"  
            expression="org.springframework.stereotype.Controller" />  
	 </context:component-scan>
<context:property-placeholder location="classpath:config.properties"/>
<aop:aspectj-autoproxy  proxy-target-class="true"/>
<task:executor id="asyncExecutor" pool-size="10"  />
<task:annotation-driven executor="asyncExecutor"/>
	<!-- <bean id="dsJdbcSource"
		  class="com.mchange.v2.c3p0.ComboPooledDataSource"    
        destroy-method="close">    
        <property name="driverClass">    
         <value>${ds.db.driver}</value>
         </property>
		<property name="jdbcUrl">
			<value><![CDATA[ jdbc:${ds.db.jdbctype}://${ds.db.host}:${ds.db.port}/${ds.db.dbname}?currentSchema=ds]]></value>
		</property>
		<property name="user">
			<value>${ds.db.username}</value>
		</property>
		<property name="password">
			<value>${ds.db.password}</value>
		</property>
	</bean> -->
	 <bean id="dsJdbcSource"  class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">          
    <property name="driverClassName" value="${ds.db.driver}" />         
    <property name="url">
    <value><![CDATA[jdbc:${ds.db.jdbctype}://${ds.db.host}:${ds.db.port}/${ds.db.dbname}?useUnicode=true&characterEncoding=utf-8]]></value>
    </property>
    <property name="username" value="${ds.db.username}" />         
    <property name="password" value="${ds.db.password}" />      
     <property name="testOnBorrow" value="true" />        
       <property name="testWhileIdle" value="true" />     
         <!-- 连接池启动时的初始值 -->  
  <property name="initialSize" value="1" />  
  <!-- 连接池的最大值 -->  
  <property name="maxActive" value="10" />  
  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->  
  <property name="maxIdle" value="3" />  
  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->  
  <property name="minIdle" value="1" />  
  <property name="removeAbandonedTimeout" value="10" />
  <property name="removeAbandoned" value="true" />  
  <property name="timeBetweenEvictionRunsMillis" value="500000" />
  <property name="minEvictableIdleTimeMillis" value="600000" />
  <property name="validationQuery" value="select 1" />    
</bean>   
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
       <property name="dataSource" ref="dsJdbcSource"/>  
   </bean>

	<bean id="dssqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dsJdbcSource" />
		<property name="typeAliasesPackage" value="com.qding.bigdata.ds.model" />
		<property name="mapperLocations" value="classpath:ds_mappers/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<bean id="dsJdbcSource2"  class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
		<property name="driverClassName" value="${ds.db.driver}" />
		<property name="url">
			<value><![CDATA[jdbc:${ds.db.jdbctype}://${ds.db.host}:${ds.db.port}/${ds.db.dbname2}?useUnicode=true&characterEncoding=utf-8]]></value>
		</property>
		<property name="username" value="${ds.db.username}" />
		<property name="password" value="${ds.db.password}" />
		<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="10" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="3" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
		<property name="removeAbandonedTimeout" value="10" />
		<property name="removeAbandoned" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="500000" />
		<property name="minEvictableIdleTimeMillis" value="600000" />
	</bean>
	<bean id="dssqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dsJdbcSource2" />
		<property name="typeAliasesPackage" value="com.qding.bigdata.ds.model" />
		<property name="mapperLocations" value="classpath:ds_mappers/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<bean id="dssqlSessionExecutor" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="dssqlSessionFactory2"/>
	</bean>


	<bean id="postgreJdbcSource"  class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
		<property name="driverClassName" value="${dw.db.driver}" />
		<property name="url">
			<value><![CDATA[jdbc:${dw.db.jdbctype}://${dw.db.host}:${dw.db.port}/${dw.db.dbname}?currentSchema=ds]]></value>
		</property>
		<property name="username" value="${dw.db.username}" />
		<property name="password" value="${dw.db.password}" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="10" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="3" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
		<property name="removeAbandonedTimeout" value="10" />
		<property name="removeAbandoned" value="true" />
		<!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		<property name="timeBetweenEvictionRunsMillis" value="500000" />
		<!-- #连接的超时时间，默认为半小时。 -->
		<property name="minEvictableIdleTimeMillis" value="600000" />
	</bean>

	<bean id="postgreJdbcSource116"  class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
		<property name="driverClassName" value="${dw116.db.driver}" />
		<property name="url">
			<value><![CDATA[jdbc:${dw116.db.jdbctype}://${dw116.db.host}:${dw116.db.port}/${dw116.db.dbname}?currentSchema=ds]]></value>
		</property>
		<property name="username" value="${dw116.db.username}" />
		<property name="password" value="${dw116.db.password}" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="10" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="3" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1" />
		<property name="removeAbandonedTimeout" value="10" />
		<property name="removeAbandoned" value="true" />
		<!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
		<property name="timeBetweenEvictionRunsMillis" value="500000" />
		<!-- #连接的超时时间，默认为半小时。 -->
		<property name="minEvictableIdleTimeMillis" value="600000" />
	</bean>

	<!-- <bean id="esJdbcSource"  class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close"> -->
	<bean id="esJdbcSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
<property name="driverClassName" value="${es.db.driver}" /> 
		<property name="url">
			<value><![CDATA[jdbc:${es.db.jdbctype}://${es.db.host}:${es.db.port}]]></value>
		</property>
 
	<!-- 	<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true" />
		连接池启动时的初始值
		<property name="initialSize" value="1" />
		连接池的最大值
		<property name="maxActive" value="10" />
		最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止
		<property name="maxIdle" value="3" />
		最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
		<property name="minIdle" value="1" />
		<property name="removeAbandonedTimeout" value="120" />
		<property name="removeAbandoned" value="true" />
		#运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		#连接的超时时间，默认为半小时。
		<property name="minEvictableIdleTimeMillis" value="3600000" /> -->
	</bean>

	<bean id="postgreSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="postgreJdbcSource" />
		<property name="typeAliasesPackage" value="com.qding.bigdata.ds.model" />
		<property name="mapperLocations" value="classpath:dw_mappers/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<bean id="postgreSqlSessionFactory116" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="postgreJdbcSource116" />
		<property name="typeAliasesPackage" value="com.qding.bigdata.ds.model" />
		<property name="mapperLocations" value="classpath:dw_mappers/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<bean id="dynamicSqlSessionFactory" class="com.qding.bigdata.ds.aop.dynamicsource.DynamicSqlSessionFactoryBean">
		<property name="map">
			<map>
				<entry key="SQL" value-ref="postgreSqlSessionFactory" />
				<entry key="SQL116" value-ref="postgreSqlSessionFactory116" />
				<entry key="SQL242" value-ref="postgreSqlSessionFactory242" />
				<entry key="PRESTO" value-ref="prestoSqlSessionFactory" />
				<entry key="MYSQL" value-ref="mysqlSqlSessionFactory" />
				<entry key="IMPALA" value-ref="impalaSqlSessionFactory" />
			</map>
		</property>
		<property name="defaultTarget" ref="postgreSqlSessionFactory"/>
	</bean>
	<bean id="sqlSessionExecutor" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="dynamicSqlSessionFactory"/>
	</bean>
	<bean id="executorESJdbcTemplate" class=" org.springframework.jdbc.core.JdbcTemplate" scope="prototype">
		<property name="dataSource" ref="esJdbcSource" />
	</bean>
 
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="dssqlSessionFactory"></property>
		<property name="basePackage" value="com.qding.bigdata.ds.dao" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="schdSqlSessionFactory"></property>
		<property name="basePackage" value="com.qding.bigdata.ds.scheduler.dao" />
	</bean>

	<task:executor id="executor" pool-size="5" />
	<task:scheduler id="scheduler" pool-size="10" />
	<!-- <bean id="senderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="" /> <property name="username" value="" /> <property 
		name="password" value="" /> <property name="defaultEncoding" value="UTF-8" 
		/> </bean> -->
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="resourceLoaderPath" value="classpath:templates" />
		<property name="preferFileSystemAccess" value="true" />
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
				<prop key="runtime.references.strict">true</prop>
			</props>
		</property>
	</bean>
	
	 <bean id="schdJdbcSource"  class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">          
    <property name="driverClassName" value="${schd.db.driver}" />         
    <property name="url">
    <value><![CDATA[jdbc:${schd.db.jdbctype}://${schd.db.host}:${schd.db.port}/${schd.db.dbname}?useUnicode=true&characterEncoding=utf-8]]></value>
    </property>
    <property name="username" value="${schd.db.username}" />
    <property name="password" value="${schd.db.password}" />
     <property name="testOnBorrow" value="true" />        
       <property name="testWhileIdle" value="true" />     
         <!-- 连接池启动时的初始值 -->  
  <property name="initialSize" value="1" />  
  <!-- 连接池的最大值 -->  
  <property name="maxActive" value="10" />  
  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->  
  <property name="maxIdle" value="3" />  
  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->  
  <property name="minIdle" value="1" />  
  <property name="removeAbandonedTimeout" value="10" />
  <property name="removeAbandoned" value="true" />  
  <property name="timeBetweenEvictionRunsMillis" value="500000" />
  <property name="minEvictableIdleTimeMillis" value="600000" />
  <property name="validationQuery" value="select 1" />    
</bean>   
 
	<bean id="schdSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="schdJdbcSource" />
		<property name="typeAliasesPackage" value="com.qding.bigdata.ds.model.scheduler" />
		<property name="mapperLocations" value="classpath:schd_mappers/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	<import resource="spring-presto.xml"/>
	<!--<import resource="spring-redis.xml"/>-->
	<import resource="spring-cache.xml"/>
	<import resource="spring-mysql.xml"/>
	<import resource="spring-postgresql242.xml"/>
    <import resource="spring-hive-meta.xml"/>
    <import resource="spring-mysql-meta.xml"/>
	<import resource="kafka-producer.xml"/>
	<import resource="spring-redis-cluster.xml"/>
	<import resource="spring-impala.xml" />
	<!--<import resource="kafka-consumer.xml"/>-->
<!-- 	<import resource="applicationContext_datasource_scheduler.xml"/> -->

<bean id="quartzScheduler" lazy-init="false" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="schdJdbcSource" />
		<property name="autoStartup" value="false" />			<!--自动启动 -->
		<property name="startupDelay" value="5" />				<!--延时启动，应用启动成功后在启动 -->
		<property name="overwriteExistingJobs" value="true" />	<!--覆盖DB中JOB：true、以数据库中已经存在的为准：false -->
		<property name="applicationContextSchedulerContextKey"  value="applicationContextKey" />
		<property name="configLocation" value="classpath:quartz.properties"/>
	</bean>

	<bean id="xxlJobDynamicScheduler" class="com.xxl.job.admin.core.schedule.XxlJobDynamicScheduler" >
		<!-- (轻易不要变更“调度器名称”, 任务创建时会绑定该“调度器名称”) -->
		<property name="scheduler" ref="quartzScheduler"/>
	</bean>
	
</beans>